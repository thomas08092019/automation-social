//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum SocialPlatform {
  FACEBOOK
  INSTAGRAM
  TIKTOK
  YOUTUBE
  TWITTER
}

enum AccountType {
  PAGE
  GROUP
  PROFILE
  BUSINESS
  CREATOR
}

enum VideoStatus {
  PENDING
  PROCESSING
  READY
  FAILED_PROCESSING
}

enum PublishingJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  PARTIALLY_COMPLETED
}

enum PublishingTaskStatus {
  PENDING
  UPLOADING
  PUBLISHED
  FAILED
  RETRYING
}

model User {
  id               String          @id() @default(uuid())
  email            String          @unique()
  username         String          @unique()
  password         String?
  profilePicture   String?
  resetToken       String?
  resetTokenExpiry DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt()
  socialAccounts   SocialAccount[]
  videos           Video[]
  publishingJobs   PublishingJob[]
  socialApps       SocialApp[]

  @@map("users")
}

model SocialAccount {
  id              String           @id() @default(uuid())
  platform        SocialPlatform
  accountType     AccountType
  accountId       String
  accountName     String
  accessToken     String
  refreshToken    String?
  expiresAt       DateTime?
  profilePicture  String?
  isActive        Boolean          @default(true)
  metadata        Json?
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  socialApp       SocialApp        @relation(fields: [socialAppId], references: [id])
  socialAppId     String
  publishingTasks PublishingTask[]

  @@unique([platform, accountId, userId])
  @@map("social_accounts")
}

model Video {
  id              String           @id() @default(uuid())
  title           String
  description     String?
  filePath        String
  thumbnailPath   String?
  duration        Int?
  status          VideoStatus      @default(PENDING)
  user            User             @relation(fields: [userId], references: [id])
  userId          String
  publishingTasks PublishingTask[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt()

  @@map("videos")
}

model PublishingJob {
  id           String              @id() @default(uuid())
  name         String
  description  String?
  status       PublishingJobStatus @default(PENDING)
  scheduleTime DateTime?
  user         User                @relation(fields: [userId], references: [id])
  userId       String
  tasks        PublishingTask[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt()

  @@map("publishing_jobs")
}

model PublishingTask {
  id              String               @id() @default(uuid())
  status          PublishingTaskStatus @default(PENDING)
  error           String?
  job             PublishingJob        @relation(fields: [jobId], references: [id])
  jobId           String
  video           Video                @relation(fields: [videoId], references: [id])
  videoId         String
  socialAccount   SocialAccount        @relation(fields: [socialAccountId], references: [id])
  socialAccountId String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt()

  @@map("publishing_tasks")
}

model SocialApp {
  id             String          @id() @default(cuid())
  name           String
  platform       SocialPlatform
  appId          String
  appSecret      String
  redirectUri    String
  isDefault      Boolean         @default(false)
  userId         String
  user           User            @relation(fields: [userId], references: [id])
  socialAccounts SocialAccount[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt()

  @@map("social_apps")
}

// ZenStack schema file
// This is based on your Prisma schema with ZenStack enhancements

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum SocialPlatform {
  FACEBOOK
  INSTAGRAM
  TIKTOK
  YOUTUBE
  TWITTER
}

enum AccountType {
  PAGE
  GROUP
  PROFILE
  BUSINESS
  CREATOR
}

enum VideoStatus {
  PENDING
  PROCESSING
  READY
  FAILED_PROCESSING
}

enum PublishingJobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  PARTIALLY_COMPLETED
}

enum PublishingTaskStatus {
  PENDING
  UPLOADING
  PUBLISHED
  FAILED
  RETRYING
}

// Models with ZenStack access control
model User {
  id               String          @id @default(uuid())
  email            String          @unique
  username         String          @unique
  password         String?
  profilePicture   String?         @map("profile_picture")
  resetToken       String?         @map("reset_token")
  resetTokenExpiry DateTime?       @map("reset_token_expiry")
  
  // Audit trail fields
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @updatedAt @map("updated_at")
  deletedAt        DateTime?       @map("deleted_at")
  createdBy        String?         @map("created_by")
  updatedBy        String?         @map("updated_by")
  deletedBy        String?         @map("deleted_by")
  
  // Relations
  socialAccounts   SocialAccount[]
  videos           Video[]
  publishingJobs   PublishingJob[]

  // Access control
  @@allow('all', auth() == this)
  @@map("users")
}

model SocialAccount {
  id              String           @id @default(uuid())
  platform        SocialPlatform
  accountType     AccountType      @map("account_type")
  accountId       String           @map("account_id")
  accountName     String           @map("account_name")
  accessToken     String           @map("access_token")
  refreshToken    String?          @map("refresh_token")
  expiresAt       DateTime?        @map("expires_at")
  profilePicture  String?          @map("profile_picture")
  isActive        Boolean          @default(true) @map("is_active")
  metadata        Json?            // For storing platform-specific data like YouTube channel info
  
  // OAuth App Configuration (moved from SocialApp)
  appId           String?          @map("app_id")          // OAuth Client ID
  appSecret       String?          @map("app_secret")      // OAuth Client Secret
  redirectUri     String?          @map("redirect_uri")    // OAuth Redirect URI
  
  // Foreign keys
  userId          String           @map("user_id")
  
  // Audit trail fields
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  createdBy       String?          @map("created_by")
  updatedBy       String?          @map("updated_by")
  deletedBy       String?          @map("deleted_by")
  
  // Relations
  user            User             @relation(fields: [userId], references: [id])
  publishingTasks PublishingTask[]

  // Access control
  @@allow('all', auth() == user)
  @@unique([accountId, userId, deletedAt])
  @@map("social_accounts")
}

model Video {
  id              String           @id @default(uuid())
  title           String
  description     String?
  filePath        String           @map("file_path")
  thumbnailPath   String?          @map("thumbnail_path")
  duration        Int?
  status          VideoStatus      @default(PENDING)
  
  // Foreign keys with snake_case mapping
  userId          String           @map("user_id")
  
  // Audit trail fields
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime         @updatedAt @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")
  createdBy       String?          @map("created_by")
  updatedBy       String?          @map("updated_by")
  deletedBy       String?          @map("deleted_by")
  
  // Relations
  user            User             @relation(fields: [userId], references: [id])
  publishingTasks PublishingTask[]

  // Access control
  @@allow('all', auth() == user)
  @@map("videos")
}

model PublishingJob {
  id           String               @id @default(uuid())
  name         String
  description  String?
  status       PublishingJobStatus  @default(PENDING)
  scheduleTime DateTime?            @map("schedule_time")
  
  // Foreign keys with snake_case mapping
  userId       String               @map("user_id")
  
  // Audit trail fields
  createdAt    DateTime             @default(now()) @map("created_at")
  updatedAt    DateTime             @updatedAt @map("updated_at")
  deletedAt    DateTime?            @map("deleted_at")
  createdBy    String?              @map("created_by")
  updatedBy    String?              @map("updated_by")
  deletedBy    String?              @map("deleted_by")
  
  // Relations
  user         User                 @relation(fields: [userId], references: [id])
  tasks        PublishingTask[]

  // Access control
  @@allow('all', auth() == user)
  @@map("publishing_jobs")
}

model PublishingTask {
  id              String               @id @default(uuid())
  status          PublishingTaskStatus @default(PENDING)
  error           String?
  
  // Foreign keys with snake_case mapping
  jobId           String               @map("job_id")
  videoId         String               @map("video_id")
  socialAccountId String               @map("social_account_id")
  
  // Audit trail fields
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")
  deletedAt       DateTime?            @map("deleted_at")
  createdBy       String?              @map("created_by")
  updatedBy       String?              @map("updated_by")
  deletedBy       String?              @map("deleted_by")
  
  // Relations
  job             PublishingJob        @relation(fields: [jobId], references: [id])
  video           Video                @relation(fields: [videoId], references: [id])
  socialAccount   SocialAccount        @relation(fields: [socialAccountId], references: [id])

  // Access control
  @@allow('all', auth() == job.user)
  @@map("publishing_tasks")
}
